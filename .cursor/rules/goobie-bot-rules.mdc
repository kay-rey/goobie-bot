---
description: Comprehensive development rules for goobie-bot Discord bot project
globs:
alwaysApply: true
---

# Goobie-Bot Development Rules

## Project Overview

- **Project Name**: goobie-bot
- **Purpose**: Discord bot for sports statistics (future feature)
- **Language**: Python 3.9
- **Deployment**: Docker on Raspberry Pi (ARM architecture)
- **Primary Library**: discord.py

## Code Standards

### Python Style

- Follow PEP 8 style guide
- Use f-strings for string formatting: `f"Hello, {name}"`
- Use double quotes for strings: `"string"` not `'string'`
- Use type hints where appropriate
- Follow the existing code patterns in bot.py

### Logging Best Practices

- **NEVER use print() statements** - they don't show in Docker logs
- Use proper logging with `logger.info()`, `logger.error()`, etc.
- Set up logging configuration for Docker container visibility
- Use structured logging with timestamps and log levels
- Log important events, errors, and debugging information
- Example logging setup:

  ```python
  import logging
  import sys

  logging.basicConfig(
      level=logging.INFO,
      format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
      handlers=[logging.StreamHandler(sys.stdout)],
  )
  logger = logging.getLogger(__name__)
  ```

### Discord.py Best Practices

- Always use the official discord.py library
- Reference documentation: https://discordpy.readthedocs.io/en/stable/
- Use proper intents (message_content, etc.)
- Handle errors gracefully with try/except blocks
- Use async/await properly for Discord API calls

## Security & Environment

### Secrets Management

- NEVER hardcode API keys, tokens, or secrets
- Always use environment variables with python-dotenv
- Keep .env file in .gitignore
- Use descriptive variable names for environment variables

### Token Security

- Discord bot tokens must be in .env file
- Never commit real tokens to version control
- Regenerate tokens if accidentally exposed

## Docker & Deployment

### Development

- Use docker-compose.yml for development with volume mounting
- Use dev.sh script for common operations
- Enable live reloading for efficient development

### Production

- Use docker-compose.prod.yml for Raspberry Pi deployment
- No volume mounting in production
- Use restart: unless-stopped for reliability

### Architecture Considerations

- Target ARM architecture for Raspberry Pi
- Use python:3.9-slim-bullseye base image
- Optimize for low resource usage

## Git & Version Control

### Commit Messages

- Use conventional commits specification
- Format: `type(scope): description`
- Types: feat, fix, chore, docs, style, refactor, test
- Always provide both title and description
- Use the docs for reference: https://www.conventionalcommits.org/en/v1.0.0/

### File Management

- Keep .gitignore comprehensive for Python, Discord bot, and Raspberry Pi
- Don't commit temporary files (diff.txt, logs, etc.)
- Use meaningful file and directory names

## Development Workflow

### Bot Development

- Test commands in development server first
- Use proper Discord permissions
- Handle edge cases and errors
- Log important events for debugging

### Testing

- Test all new features before committing
- Use the dev.sh script for testing
- Check logs for errors: `./dev.sh logs`
- Verify bot responds correctly in Discord

### Documentation

- Comment complex code sections
- Use docstrings for functions and classes
- Keep README.md updated with setup instructions
- Document any new features or commands

## Project Structure

### Core Files

- `bot.py` - Main bot application
- `requirements.txt` - Python dependencies
- `Dockerfile` - Container configuration
- `.env` - Environment variables (not committed)

### Development Files

- `docker-compose.yml` - Development configuration
- `docker-compose.prod.yml` - Production configuration
- `dev.sh` - Development helper script
- `.gitignore` - Git ignore rules

### Configuration Files

- `.gitattributes` - Git line ending normalization
- `.cursor/rules/` - Development rules and guidelines

## Future Features

### Sports Statistics (Planned)

- Use requests library for API calls
- Implement proper error handling for external APIs
- Cache data appropriately for performance
- Consider rate limiting for API calls

### Bot Commands

- Use slash commands when possible
- Implement proper command validation
- Add help commands and documentation
- Consider command permissions and roles

## Error Handling

### Bot Errors

- Log all errors with appropriate levels
- Don't crash the bot for non-critical errors
- Provide user-friendly error messages
- Use try/except blocks for external API calls

### Development Errors

- Check Docker logs for container issues
- Verify environment variables are set
- Test Discord permissions and intents
- Use proper debugging techniques

## Performance Considerations

### Resource Usage

- Optimize for Raspberry Pi's limited resources
- Use efficient data structures
- Minimize memory usage
- Consider connection pooling for external APIs

### Discord API

- Respect rate limits
- Use proper caching strategies
- Batch operations when possible
- Monitor API usage

## Maintenance

### Regular Tasks

- Update dependencies regularly
- Monitor bot uptime and performance
- Review and update security practices
- Keep documentation current

### Monitoring

- Use proper logging levels
- Monitor error rates
- Track bot performance metrics
- Set up alerts for critical issues

## Communication

### Code Comments

- Explain complex logic
- Document API integrations
- Note any workarounds or hacks
- Keep comments up to date

### Commit Messages

- Be descriptive, clear and professional
- Make a seperate title and description
- Reference issues or features
- Use present tense: "Add feature" not "Added feature"
- Keep title under 50 characters

---

_This document should be updated as the project evolves and new patterns emerge._
